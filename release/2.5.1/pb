package Modules;
message probuf {
    message SetUserStatusInput
    {
        optional int32 status=1;
    }

    message SetUserStatusOutput
    {
        optional int32 nothing=1;
    }

    message GetUserStatusInput
    {
        optional int32 nothing=1;
    }

    message GetUserStatusOutput
    {
        optional string status=1;
        optional string subUserId=2;
    }

    message SubUserStatusInput
    {
        repeated string userid =1; 
    }

    message SubUserStatusOutput
    {
        optional int32 nothing=1;   
    }
    message VoipDynamicInput
    {
        required int32  engineType = 1;
        required string channelName = 2;
        optional string channelExtra = 3;
    }

    message VoipDynamicOutput
    {
         required string dynamicKey=1;
    }
    message NotifyMsg {
        required int32 type = 1;
        optional int64 time = 2;
        optional string chrmId=3;
    }
    message SyncRequestMsg {
        required int64 syncTime = 1;
        required bool ispolling = 2;
        optional bool isweb=3;
        optional bool isPullSend=4;
        optional bool isKeeping=5;
        optional int64 sendBoxSyncTime=6;
    }
    message UpStreamMessage {
        required int32 sessionId = 1;
        required string classname = 2;
        required bytes content = 3;
        optional string pushText = 4;
        optional string appData = 5;
        repeated string userId = 6;
        optional int64 delMsgTime = 7; //删除状态类命令消息的时间
        optional string delMsgId = 8;  //删除状态类命令消息 Id
        optional int32 configFlag = 9; //标记位配置参数，第一位（最后一位）为voipPush
    }
    message DownStreamMessages {
        repeated DownStreamMessage list = 1;
        required int64 syncTime = 2;
        optional bool finished = 3;
    }
    message DownStreamMessage {
        required string fromUserId = 1;
        required ChannelType type = 2;
        optional string groupId = 3;
        required string classname = 4;
        required bytes content = 5;
        required int64 dataTime = 6;
        required int64 status = 7;
        optional int64 extra = 8;
        optional string msgId = 9;
        optional int32 direction = 10; 
    }
    enum ChannelType {
        PERSON = 1;
        PERSONS = 2;
        GROUP = 3;
        TEMPGROUP = 4;
        CUSTOMERSERVICE = 5;
        NOTIFY = 6;
        MC=7;
        MP=8;
    }
    message CreateDiscussionInput {
        optional string name = 1;
    }
    message CreateDiscussionOutput {
        required string id = 1;
    }
    message ChannelInvitationInput {
        repeated string users = 1;
    }
    message LeaveChannelInput {
        required int32 nothing = 1;
    }
    message ChannelEvictionInput {
        required string user = 1;
    }
    message RenameChannelInput {
        required string name = 1;
    }
    message ChannelInfoInput {
        required int32 nothing = 1;
    }
    message ChannelInfoOutput {
        required ChannelType type = 1;
        required string channelId = 2;
        required string channelName = 3;
        required string adminUserId = 4;
        repeated string firstTenUserIds = 5;
        required int32 openStatus = 6;
    }
    message ChannelInfosInput {
        required int32 page = 1;
        optional int32 number = 2;
    }
    message ChannelInfosOutput {
        repeated ChannelInfoOutput channels = 1;
        required int32 total = 2;
    }
    message MemberInfo {
        required string userId = 1;
        required string userName = 2;
        required string userPortrait = 3;
        required string extension = 4;
    }
    message GroupMembersInput {
        required int32 page = 1;
        optional int32 number = 2;
    }
    message GroupMembersOutput {
        repeated MemberInfo members = 1;
        required int32 total = 2;
    }
    message GetUserInfoInput {
        required int32 nothing = 1;
    }
    message GetUserInfoOutput {
        required string userId = 1;
        required string userName = 2;
        required string userPortrait = 3;
    }
    message GetSessionIdInput {
        required int32 nothing = 1;
    }
    message GetSessionIdOutput {
        required int32 sessionId = 1;
    }
    enum FileType {
        image = 1;
        audio = 2;
        video = 3;
        file = 4;
    }
    message GetQNupTokenInput {
        required FileType type = 1;
    }
    message GetQNdownloadUrlInput {
        required FileType type = 1;
        required string key = 2;
        optional string  fileName = 3;
    }
    message GetQNupTokenOutput {
        required int64 deadline = 1;
        required string token = 2;
    }
    message GetQNdownloadUrlOutput {
        required string downloadUrl = 1;
    }
    message Add2BlackListInput {
        required string userId = 1;
    }
    message RemoveFromBlackListInput {
        required string userId = 1;
    }
    message QueryBlackListInput {
        required int32 nothing = 1;
    }
    message QueryBlackListOutput {
        repeated string userIds = 1;
    }
    message BlackListStatusInput {
        required string userId = 1;
    }
    message BlockPushInput {
        required string blockeeId = 1;
    }
    message ModifyPermissionInput {
        required int32 openStatus = 1;
    }
    message GroupInput {
        repeated GroupInfo groupInfo = 1;
    }
    message GroupOutput {
        required int32 nothing = 1;
    }
    message GroupInfo {
        required string id = 1;
        required string name = 2;
    }
    message GroupHashInput {
        required string userId = 1;
        required string groupHashCode = 2;
    }
    message GroupHashOutput {
        required GroupHashType result = 1;
    }
    enum GroupHashType {
        group_success = 0x00;
        group_failure = 0x01;
    }
    message ChrmInput {
        required int32 nothing = 1;
    }
    message ChrmOutput {
        required int32 nothing = 1;
    }
    message ChrmPullMsg {
        required int64 syncTime = 1;
        required int32 count = 2;
    }
    
    message ChrmPullMsgNew 
    {
     required int32 count = 1;
     required int64 syncTime = 2;
     optional string chrmId=3;
    }
    
    message RelationsInput
    {
        required ChannelType type = 1;
        optional DownStreamMessage msg =2;
        optional int32 count = 3;
        optional int32 offset = 4;
        optional int64 startTime = 5;
        optional int64 endTime = 6;
    }
    message RelationsOutput
    {
        repeated RelationInfo info = 1;
    }
    message RelationInfo
    {
        required ChannelType type = 1;
        required string userId = 2;
        optional DownStreamMessage msg =3;
        optional int64 readMsgTime= 4;
    }
    message RelationInfoReadTime
    {
        required ChannelType type = 1;
        required int64 readMsgTime= 2;
        required string targetId = 3;
    }
    message CleanHisMsgInput
    {
         required string targetId = 1;
         required int64 dataTime = 2;
         optional int32 conversationType= 3;
    }
    message HistoryMessageInput
    {
        required string targetId = 1;
        required int64 dataTime =2;
        required int32 size  = 3;
    }

    message HistoryMessagesOuput
    {
        repeated DownStreamMessage list = 1;
        required int64 syncTime = 2;
        required int32 hasMsg = 3;
    }
    message QueryChatroomInfoInput
    {
     required int32 count= 1;
     optional int32 order= 2;
    }

    message QueryChatroomInfoOutput
    {
     optional int32 userTotalNums = 1;
     repeated ChrmMember userInfos = 2;
    }
    message ChrmMember
    {
     required int64 time = 1;
     required string id = 2;
    }
    message MPFollowInput
    {
        required string id = 1;
    }

    message MPFollowOutput
    {
        required int32 nothing = 1;
        optional MpInfo info =2;
    }

    message MCFollowInput
    {
        required string id = 1;
    }

    message MCFollowOutput
    {
        required int32 nothing = 1;
        optional MpInfo info =2;
    }

    message MpInfo  
    {
        required string mpid=1;
        required string name = 2;
        required string type = 3;
        required int64 time=4;
        optional string portraitUrl=5;
        optional string extra =6;
    }

    message SearchMpInput
    {
        required int32 type=1;
        required string id=2;
    }

    message SearchMpOutput
    {
        required int32 nothing=1;
        repeated MpInfo info = 2;
    }

    message PullMpInput
    {
        required int64 time=1;
        required string mpid=2;
    }

    message PullMpOutput
    {
        required int32 status=1;
        repeated MpInfo info = 2;
    }
    message HistoryMsgInput  
    {
        optional string targetId = 1;
        optional int64 time = 2;
        optional int32 count  = 3;
        optional int32 order = 4;
    }

    message HistoryMsgOuput 
    {
        repeated DownStreamMessage list=1;
        required int64 syncTime=2;
        required int32 hasMsg=3;
    }
    message RtcQueryListInput{
      optional int32 order=1;
    }

    message RtcKeyDeleteInput{
      repeated string key=1;
    }

    message RtcValueInfo{
      required string key=1;
      required string value=2;
    }

    message RtcUserInfo{
      required string userId=1;
      repeated RtcValueInfo userData=2;
    }

    message RtcUserListOutput{
      repeated RtcUserInfo list=1;
      optional string token=2;
    }
    message RtcRoomInfoOutput{
        optional string roomId = 1;
        repeated RtcValueInfo roomData = 2;
        optional int32 userCount = 3;
        repeated RtcUserInfo list=4;
    }
    message RtcInput{
      required int32 roomType=1;
      optional int32 broadcastType=2;
    }
    message RtcQryInput{ 
      required bool isInterior=1;
      required targetType target=2;
      repeated string key=3;
    }
    message RtcQryOutput{
      repeated RtcValueInfo outInfo=1;
    }
    message RtcDelDataInput{
      repeated string key=1;
      required bool isInterior=2;
      required targetType target=3;
    }
    message RtcDataInput{ 
      required bool interior=1;
      required targetType target=2;
      repeated string key=3;
      optional string objectName=4;
      optional string content=5;
    }
    message RtcSetDataInput{
      required bool interior=1;
      required targetType target=2;
      required string key=3;
      required string value=4;
      optional string objectName=5;
      optional string content=6;
    }
    message RtcOutput
    {
        optional int32 nothing=1;   
    }
    message RtcTokenOutput{
      required string rtcToken=1;
    }
    enum targetType {
      ROOM =1 ;
      PERSON = 2;
    }
    message RtcSetOutDataInput{
      required targetType target=1;
      repeated RtcValueInfo valueInfo=2;
      optional string objectName=3;
      optional string content=4;
    }
    message RtcQryUserOutDataInput{
      repeated string userId = 1;
    }
    message RtcUserOutDataOutput{
      repeated RtcUserInfo user = 1;
    }
}




base64:
